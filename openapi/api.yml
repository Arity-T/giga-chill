openapi: 3.0.0

info:
  title: GigaChill
  version: 0.1.0

servers:
  - url: http://localhost:3000

security:
  - CookieAuth: []

tags:
  - name: Me
  - name: Events
  - name: Invite Links
  - name: Participants
  - name: Shopping Lists
  - name: Shopping List Items
  - name: Shopping List Consumers
  - name: Tasks
  - name: Debts

paths:
  /auth/login:
    post:
      summary: Аутентификация пользователя
      description: Возвращает JWT токен при успешной аутентификации.
      tags: [Me]
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginPassword"
      responses:
        "204":
          description: JWT отправлен в Set-Cookie (HttpOnly). Тело пустое.
        "401":
          description: Неверный логин или пароль
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/register:
    post:
      summary: Регистрация нового пользователя
      tags: [Me]
      operationId: register
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "204":
          description: Пользователь создан. JWT-токен отправлен в Set-Cookie (HttpOnly). Тело пустое.
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "409":
          description: Пользователь с таким логином уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/logout:
    post:
      summary: Выход из системы
      description: Удаляет JWT токен из cookie.
      tags: [Me]
      operationId: logout
      responses:
        "204":
          description: Пользователь успешно вышел из системы. JWT токен удалён из cookie.
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /me:
    get:
      summary: Текущий пользователь
      description: Возвращает данные пользователя, идентифицированного по JWT.
      tags: [Me]
      operationId: getMe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /events:
    get:
      summary: Список моих мероприятий
      description:
        Возвращает все мероприятия, в которых участвует аутентифицированный
        пользователь, вместе с его ролью в этих мероприятиях.
      tags: [Events]
      operationId: getEvents
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Events"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

    post:
      summary: Создать мероприятие
      description: Автор запроса автоматически становится **owner**.
      tags: [Events]
      operationId: createEvent
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"

  /events/{eventId}:
    get:
      summary: Получить мероприятие
      description:
        Возвращает мероприятие, в котором участвует аутентифицированный
        пользователь, вместе с его ролью в этом мероприятии.
      tags: [Events]
      operationId: getEvent
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    patch:
      summary: Обновить мероприятие
      tags: [Events]
      operationId: updateEvent
      parameters:
        - $ref: "#/components/parameters/eventId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Event"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    delete:
      summary: Удалить мероприятие
      tags: [Events]
      operationId: deleteEvent
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/invitation-token:
    post:
      summary: Создать новый токен
      description: Токен генерирует пользователь со статусом **owner**.
      tags: [Invite Links]
      operationId: createEventInvitationToken
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    get:
      summary: Получение токена
      description: Возвращает заранее сгенерированный токен-приглашение.
        Доступно пользователям с ролью **admin** или **owner**.
        Если токен ещё не был сгенерирован, то в поле token возвращается null.
      tags: [Invite Links]
      operationId: getEventInvitationToken
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InvitationToken"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/join-by-invitation-token:
    post:
      summary: Присоединиться к мероприятию по токену
      description: Пользователь становится участником мероприятия.
      tags: [Invite Links]
      operationId: joinByInvitationToken
      parameters:
        - $ref: "#/components/parameters/eventId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvitationToken"
      responses:
        "200":
          description: Идентификатор мероприятия, к которому присоединился пользователь
          content:
            application/json:
              schema:
                type: object
                properties:
                  event_id:
                    $ref: "#/components/schemas/ReadOnlyUUID"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Пользователь уже является участником мероприятия
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /events/{eventId}/participants:
    get:
      summary: Список участников
      tags: [Participants]
      operationId: getParticipants
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UsersInEvent"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    post:
      summary: Добавить участника
      description: Добавление по логину. Роль по умолчанию — **participant**.
      tags: [Participants]
      operationId: addParticipant
      parameters:
        - $ref: "#/components/parameters/eventId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLogin"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Пользователь уже является участником мероприятия
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /events/{eventId}/participants/{participantId}:
    delete:
      summary: Удалить участника
      tags: [Participants]
      operationId: deleteParticipant
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/participantId"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/participants/{participantId}/role:
    patch:
      summary: Изменить роль участника
      tags: [Participants]
      operationId: updateParticipantRole
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/participantId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRole"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/shopping-lists:
    get:
      summary: Получение списков покупок
      description:
        Возвращает все списки покупок, связанные с указанным мероприятием,
        вместе с элементами списков покупок и потребителями.
      tags: [Shopping Lists]
      operationId: getShoppingLists
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShoppingListsWithItems"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    post:
      summary: Добавить список покупок
      tags: [Shopping Lists]
      operationId: addShoppingList
      parameters:
        - $ref: "#/components/parameters/eventId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateShoppingListRequest"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/shopping-lists/{shoppingListId}:
    patch:
      summary: Изменить список покупок
      tags: [Shopping Lists]
      operationId: updateShoppingList
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/shoppingListId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingListWithItems"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    delete:
      summary: Удалить список покупок
      tags: [Shopping Lists]
      operationId: deleteShoppingList
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/shoppingListId"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/shopping-lists/{shoppingListId}/budget:
    put:
      summary: Изменить бюджет списка покупок
      tags: [Shopping Lists]
      operationId: updateShoppingListBudget
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/shoppingListId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingListBudget"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/shopping-lists/{shoppingListId}/shopping-items:
    post:
      summary: Добавить элемент в список покупок
      tags: [Shopping List Items]
      operationId: addShoppingItem
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/shoppingListId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingItem"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/shopping-lists/{shoppingListId}/shopping-items/{shoppingItemId}:
    patch:
      summary: Изменить элемент списка покупок
      tags: [Shopping List Items]
      operationId: updateShoppingItem
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/shoppingListId"
        - $ref: "#/components/parameters/shoppingItemId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingItem"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    delete:
      summary: Удалить элемент из списка покупок
      tags: [Shopping List Items]
      operationId: deleteShoppingItem
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/shoppingListId"
        - $ref: "#/components/parameters/shoppingItemId"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/shopping-lists/{shoppingListId}/shopping-items/{shoppingItemId}/purchased-state:
    patch:
      summary: Изменить статус элемента списка покупок
      tags: [Shopping List Items]
      operationId: updateShoppingItemPurchasedStatus
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/shoppingListId"
        - $ref: "#/components/parameters/shoppingItemId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShoppingItemPurchasedState"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/shopping-lists/{shoppingListId}/consumers:
    put:
      summary: Указать потребителей для списка покупок
      description: |
        Идемпотентное действие - список потребителей полностью заменяется.

        Есть некоторый риск, что один клиент перезапишет другого. 
        Не критично, но стоит иметь в виду. Вариант решения - ETag/If-Match.
      tags: [Shopping List Consumers]
      operationId: setConsumers
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/shoppingListId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UUIDList"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"
        "409":
          description: Статус списка покупок не позволяет изменять потребителей
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /events/{eventId}/tasks:
    get:
      summary: Получить задачи
      tags: [Tasks]
      operationId: getTasks
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Tasks"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    post:
      summary: Создать задачу
      tags: [Tasks]
      operationId: createTask
      parameters:
        - $ref: "#/components/parameters/eventId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskCreateRequest"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/tasks/{taskId}:
    get:
      summary: Получить задачу
      tags: [Tasks]
      operationId: getTask
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/taskId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TaskWithShoppingLists"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    patch:
      summary: Обновить задачу
      tags: [Tasks]
      operationId: updateTask
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/taskId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskPatchRequest"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

    delete:
      summary: Удалить задачу
      tags: [Tasks]
      operationId: deleteTask
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/taskId"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/tasks/{taskId}/executor:
    put:
      summary: Указать исполнителя
      description: Поле executor_id может быть null - это означает,
        что у задачи нет исполнителя. В этом случае задача переходит в статус "открыта".
      tags: [Tasks]
      operationId: assignTask
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/taskId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskExecutorId"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/tasks/{taskId}/shopping-lists:
    put:
      summary: Указать списки покупок для задачи
      tags: [Tasks]
      operationId: assignShoppingLists
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/taskId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UUIDList"
      responses:
        "204":
          description: No Content
        "400":
          $ref: "#/components/responses/InvalidDataError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/tasks/{taskId}/take-in-work:
    post:
      summary: Взять задачу в работу
      description: Если исполнитель не указан, то тот кто взял задачу в работу становится её исполнителем.
      tags: [Tasks]
      operationId: takeTaskInWork
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/taskId"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/tasks/{taskId}/send-for-review:
    post:
      summary: Отправить задачу на проверку
      tags: [Tasks]
      operationId: sendTaskForReview
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/taskId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskSendForReviewRequest"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /events/{eventId}/tasks/{taskId}/review:
    post:
      summary: Подтвердить или отклонить задачу
      tags: [Tasks]
      operationId: reviewTask
      parameters:
        - $ref: "#/components/parameters/eventId"
        - $ref: "#/components/parameters/taskId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskReviewRequest"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"

  /events/{eventId}/finalize:
    post:
      summary: Завершить мероприятие и провести расчёты долгов участников
      tags: [Debts]
      operationId: finalizeEvent
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "204":
          description: No Content
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/my-balance:
    get:
      summary: Получить баланс пользователя в мероприятии
      tags: [Debts]
      operationId: getMyBalance
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserBalance"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

  /events/{eventId}/balance-summary:
    get:
      summary: Получить сводку по балансу мероприятия
      tags: [Debts]
      operationId: getEventBalanceSummary
      parameters:
        - $ref: "#/components/parameters/eventId"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventBalanceSummary"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "403":
          $ref: "#/components/responses/ForbiddenError"
        "404":
          $ref: "#/components/responses/NotFoundError"

components:
  responses:
    InvalidDataError:
      description: Невалидные данные в теле запроса
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    UnauthorizedError:
      description: Токен отсутствует, истёк или некорректен
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    ForbiddenError:
      description: У пользователя недостаточно прав для выполнения операции
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFoundError:
      description: Один или несколько задействованных ресурсов не найдены
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

  parameters:
    eventId:
      name: eventId
      in: path
      required: true
      description: Идентификатор мероприятия
      schema:
        $ref: "#/components/schemas/UUID"

    participantId:
      name: participantId
      in: path
      required: true
      description: Идентификатор участника
      schema:
        $ref: "#/components/schemas/UUID"

    shoppingListId:
      name: shoppingListId
      in: path
      required: true
      description: Идентификатор списка покупок
      schema:
        $ref: "#/components/schemas/UUID"

    shoppingItemId:
      name: shoppingItemId
      in: path
      required: true
      description: Идентификатор элемента списка покупок
      schema:
        $ref: "#/components/schemas/UUID"

    taskId:
      name: taskId
      in: path
      required: true
      description: Идентификатор задачи
      schema:
        $ref: "#/components/schemas/UUID"

  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: token

  schemas:
    UUID:
      type: string
      format: uuid
      example: 123e4567-e89b-12d3-a456-426614174000

    ReadOnlyUUID:
      allOf:
        - $ref: "#/components/schemas/UUID"
        - readOnly: true

    UUIDList:
      type: array
      items:
        $ref: "#/components/schemas/UUID"

    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Сообщение об ошибке
          example: "Something went wrong"
      required: [message]

    UserLogin:
      type: object
      properties:
        login:
          type: string
          description: Логин пользователя
          example: user123

    UserPassword:
      type: object
      properties:
        password:
          type: string
          description: Пароль пользователя
          example: mysecurepassword

    UserName:
      type: object
      properties:
        name:
          type: string
          description: Имя пользователя
          example: Иван Иванов

    UserLoginPassword:
      allOf:
        - $ref: "#/components/schemas/UserLogin"
        - $ref: "#/components/schemas/UserPassword"

    UserRegister:
      allOf:
        - $ref: "#/components/schemas/UserLogin"
        - $ref: "#/components/schemas/UserPassword"
        - $ref: "#/components/schemas/UserName"

    UserId:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"

    User:
      allOf:
        - $ref: "#/components/schemas/UserLogin"
        - $ref: "#/components/schemas/UserName"
        - $ref: "#/components/schemas/UserId"

    RoleEnum:
      type: string
      enum: [owner, admin, participant]
      description: Роль пользователя в мероприятии
      example: owner

    UserRole:
      type: object
      properties:
        role:
          $ref: "#/components/schemas/RoleEnum"

    UserInEvent:
      allOf:
        - $ref: "#/components/schemas/User"
        - type: object
          properties:
            user_role:
              $ref: "#/components/schemas/RoleEnum"
            balance:
              type: number
              description: Баланс пользователя в мероприятии (сумма долгов)
              example: 200

    UsersInEvent:
      type: array
      items:
        $ref: "#/components/schemas/UserInEvent"

    Event:
      type: object
      properties:
        event_id:
          $ref: "#/components/schemas/ReadOnlyUUID"
        user_role:
          readOnly: true
          allOf:
            - $ref: "#/components/schemas/RoleEnum"
        title:
          type: string
          description: Название мероприятия
          example: "Встреча с друзьями"
        location:
          type: string
          description: Место мероприятия
          example: Политехническая улица, 29 лит П
        start_datetime:
          type: string
          format: date-time
          description: Дата и время начала мероприятия
          example: "2025-01-01T10:00:00Z"
        end_datetime:
          type: string
          format: date-time
          description: Дата и время окончания мероприятия
          example: "2025-01-01T12:00:00Z"
        description:
          type: string
          description: Описание мероприятия
          example: "Встреча с друзьями в кафе"
        budget:
          readOnly: true
          type: number
          description: Бюджет мероприятия
          example: 10000
        is_finalized:
          readOnly: true
          type: boolean
          description: Флаг, который показывает завершено ли мероприятие или нет.
          example: false

    InvitationToken:
      type: object
      properties:
        invitation_token:
          type: string
          description: Токен-приглашение
          example: "0fab8e08-4b0d-4a3d-9771-9f6c6a9d5a1c"

    Events:
      type: array
      items:
        $ref: "#/components/schemas/Event"

    ShoppingItem:
      type: object
      properties:
        shopping_item_id:
          $ref: "#/components/schemas/ReadOnlyUUID"
        title:
          type: string
          description: Название элемента списка покупок
          example: "Яблоки"
        quantity:
          type: number
          description: Количество элемента списка покупок
          example: 10
        unit:
          type: string
          description: Единицы измерения
          example: "шт"
        is_purchased:
          readOnly: true
          type: boolean
          description: Признак того, что элемент списка покупок куплен
          example: false

    ShoppingItems:
      type: array
      items:
        $ref: "#/components/schemas/ShoppingItem"

    ShoppingItemPurchasedState:
      type: object
      properties:
        is_purchased:
          type: boolean
          description: Признак того, что элемент списка покупок куплен
          example: false

    CreateShoppingListRequest:
      type: object
      properties:
        title:
          type: string
          description: Название списка покупок
          example: "Купить фрукты"
        description:
          type: string
          description: Описание списка покупок
          example: "Купить фрукты для вечеринки"

    ShoppingListBudget:
      type: object
      properties:
        budget:
          type: number
          description: Бюджет списка покупок
          example: 1000

    ShoppingListWithItems:
      type: object
      properties:
        shopping_list_id:
          $ref: "#/components/schemas/ReadOnlyUUID"
        task_id:
          $ref: "#/components/schemas/ReadOnlyUUID"
        title:
          type: string
          description: Название задачи
          example: "Купить фрукты"
        description:
          type: string
          description: Описание списка покупок
          example: "Купить фрукты для вечеринки"
        status:
          readOnly: true
          type: string
          enum:
            [
              unassigned,
              assigned,
              in_progress,
              bought,
              partially_bought,
              cancelled,
            ]
          description: Статус списка покупок
          example: unassigned
        can_edit:
          readOnly: true
          type: boolean
          description: Может ли пользователь редактировать список покупок
          example: true
        budget:
          readOnly: true
          type: number
          description: Реальная стоимость списка покупок
          example: 499.99
        shopping_items:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/ShoppingItem"
        consumers:
          readOnly: true
          type: array
          items:
            $ref: "#/components/schemas/UserInEvent"

    ShoppingListsWithItems:
      type: array
      items:
        $ref: "#/components/schemas/ShoppingListWithItems"

    TaskExecutorId:
      type: object
      properties:
        executor_id:
          description: Идентификатор исполнителя задачи
          $ref: "#/components/schemas/UUID"

    TaskCreateRequest:
      type: object
      properties:
        title:
          type: string
          description: Название задачи
          example: "Купить фрукты"
        description:
          type: string
          description: Описание задачи
          example: "Купить фрукты для вечеринки"
        deadline_datetime:
          type: string
          format: date-time
          description: Дедлайн задачи
          example: "2025-01-01T12:00:00Z"
        executor_id:
          $ref: "#/components/schemas/UUID"
        shopping_lists_ids:
          type: array
          items:
            $ref: "#/components/schemas/UUID"

    TaskPatchRequest:
      type: object
      properties:
        title:
          type: string
          description: Название задачи
          example: "Купить фрукты"
        description:
          type: string
          description: Описание задачи
          example: "Купить фрукты для вечеринки"
        deadline_datetime:
          type: string
          format: date-time
          description: Дедлайн задачи
          example: "2025-01-01T12:00:00Z"

    Task:
      type: object
      properties:
        task_id:
          $ref: "#/components/schemas/ReadOnlyUUID"
        title:
          type: string
          description: Название задачи
          example: "Купить фрукты"
        description:
          type: string
          description: Описание задачи
          example: "Купить фрукты для вечеринки"
        status:
          type: string
          enum: [open, in_progress, under_review, completed]
          description: Статус задачи
        deadline_datetime:
          type: string
          format: date-time
          description: Дедлайн задачи
          example: "2025-01-01T12:00:00Z"
        executor_comment:
          type: string
          description: Комментарий исполнителя
          example: "Задача выполнена"
        reviewer_comment:
          type: string
          description: Комментарий проверяющего
          example: "Подтверждаю выполнение задачи"
        permissions:
          type: object
          properties:
            can_edit:
              type: boolean
              description: Может ли пользователь редактировать задачу
              example: true
            can_take_in_work:
              type: boolean
              description: Может ли пользователь взять задачу в работу
              example: true
            can_review:
              type: boolean
              description: Может ли пользователь подтвердить или отклонить задачу
              example: true
        author:
          allOf:
            - $ref: "#/components/schemas/User"
        executor:
          allOf:
            - $ref: "#/components/schemas/User"

    TaskWithShoppingLists:
      allOf:
        - $ref: "#/components/schemas/Task"
        - type: object
          properties:
            shopping_lists:
              type: array
              items:
                $ref: "#/components/schemas/ShoppingListsWithItems"

    Tasks:
      type: array
      items:
        $ref: "#/components/schemas/Task"

    TaskSendForReviewRequest:
      type: object
      properties:
        executor_comment:
          type: string
          description: Комментарий исполнителя
          example: "Задача выполнена"

    TaskReviewRequest:
      type: object
      properties:
        reviewer_comment:
          type: string
          description: Комментарий проверяющего
          example: "Подтверждаю выполнение задачи"
        is_approved:
          type: boolean
          description: Признак того, что задача одобрена

    UserBalance:
      type: object
      properties:
        my_debts:
          type: array
          items:
            $ref: "#/components/schemas/Debt"
        debts_to_me:
          type: array
          items:
            $ref: "#/components/schemas/Debt"

    Debt:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        amount:
          type: number
          description: Сумма долга
          example: 1000

    EventBalanceSummary:
      type: array
      items:
        type: object
        properties:
          user:
            $ref: "#/components/schemas/User"
          total_balance:
            type: number
            description: Сумма долгов пользователя в мероприятии (может быть отрицательной)
            example: 200
          user_balance:
            $ref: "#/components/schemas/UserBalance"
