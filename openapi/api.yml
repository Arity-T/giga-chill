openapi: 3.0.0

info:
  title: GigaChill
  version: 0.1.0

servers:
  - url: http://localhost:3000

security:
  - CookieAuth: []

tags:
  - name: Auth
  - name: Me
  - name: Roles

paths:
  /auth/login:
    post:
      summary: Аутентификация пользователя
      description: Возвращает JWT токен при успешной аутентификации.
      tags: [Auth]
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserLoginPassword"
      responses:
        "204":
          description: JWT отправлен в Set-Cookie (HttpOnly). Тело пустое.
        "401":
          description: Неверный логин или пароль
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/register:
    post:
      summary: Регистрация нового пользователя
      tags: [Auth]
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRegister"
      responses:
        "204":
          description: Пользователь создан. JWT-токен отправлен в Set-Cookie (HttpOnly). Тело пустое.
        "400":
          description: Невалидные данные (например, короткий пароль)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "409":
          description: Пользователь с таким логином уже существует
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /auth/logout:
    post:
      summary: Выход из системы
      description: Удаляет JWT токен из cookie.
      tags: [Auth]
      operationId: logoutUser
      responses:
        "204":
          description: Пользователь успешно вышел из системы. JWT токен удалён из cookie.
        "401":
          description: Токен отсутствует, истёк или некорректен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /me:
    get:
      summary: Текущий пользователь
      description: Возвращает данные пользователя, идентифицированного по JWT.
      tags: [Me]
      operationId: getMe
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Токен отсутствует, истёк или некорректен
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /owner:
    get:
      summary: Информация для владельца
      description: Возвращает данные пользователю, идентифицированного по JWT и имеющего роль "Owner".
      tags: [Roles]
      operationId: getOwner
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/OwnerData"
        "403":
          description: Отказано в доступе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDenied"
  
  /admin:
    get:
      summary: Информация для админа
      description: Возвращает данные пользователю, идентифицированного по JWT и имеющего роль "Admin" или "Owner".
      tags: [Roles]
      operationId: getAdmin
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/AdminData"
        "403":
          description: Отказано в доступе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDenied"

  /member:
    get:
      summary: Информация для участника
      description: Возвращает данные пользователю, идентифицированного по JWT и имеющего роль "Owner", "Admin" или "Member".
      tags: [Roles]
      operationId: getMember
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                $ref: "#/components/schemas/MemberData"
        "403":
          description: Отказано в доступе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessDenied"


components:
  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: token

  schemas:
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: Сообщение об ошибке
          example: "Something went wrong"
      required: [message]

    UserLogin:
      type: object
      properties:
        login:
          type: string
          description: Логин пользователя
          example: user123

    UserPassword:
      type: object
      properties:
        password:
          type: string
          description: Пароль пользователя
          example: mysecurepassword

    UserName:
      type: object
      properties:
        name:
          type: string
          description: Имя пользователя
          example: Иван Иванов

    UserLoginPassword:
      allOf:
        - $ref: "#/components/schemas/UserLogin"
        - $ref: "#/components/schemas/UserPassword"

    UserRegister:
      allOf:
        - $ref: "#/components/schemas/UserLogin"
        - $ref: "#/components/schemas/UserPassword"
        - $ref: "#/components/schemas/UserName"

    User:
      allOf:
        - $ref: "#/components/schemas/UserLogin"
        - $ref: "#/components/schemas/UserName"
        - type: object
          properties:
            id:
              type: string
              description: Идентификатор пользователя
              example: c014cfe2-7a69-4959-88f7-4a2b795c2a20

    AccessDenied:
      type: object
      properties:
        message:
          type: string
          description: Сообщение об ошибке
          example: "Access Denied"
      required: [message]

    OwnerData:
      type: string
      description: Данные для владельца
      example: example for owners

    AdminData:
      type: string
      description: Данные для админа
      example: example for admins

    MemberData:
      type: string
      description: Данные для участника
      example: example for members
    
