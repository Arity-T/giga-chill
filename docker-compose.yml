services:
  postgres:
    image: postgres:17-alpine
    container_name: gigachill-db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_HOST_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  builder:
    build:
      context: .
      dockerfile: backend/Dockerfile.builder
    image: gigachill-builder
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    command: ["./build.sh"]
    volumes:
      - backend-build:/app/build

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.backend
    depends_on:
      builder:
        condition: service_completed_successfully
    env_file:
      - .env
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - backend-build:/app/build
      - ./backend/logs:/app/logs
    
  elk-setup:
   image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
   user: "0"
   command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";  
          exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find config/certs -type d -exec chmod 755 \{\} \;
        find config/certs -type f -exec chmod 644 \{\} \;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Copying all certs to shared volume...";
        [ -d config/certs ] && cp -r config/certs/* /usr/share/elasticsearch/config/certs/;
        echo "Setting final permissions...";
        chmod -R 755 /usr/share/elasticsearch/config/certs;
        chmod 644 /usr/share/elasticsearch/config/certs/*/*;
        echo "All certificates ready in shared volume";
        echo "All done!";
     '
   healthcheck:
     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
     interval: 1s
     timeout: 5s
     retries: 120
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - gigachill-network
  logstash:
    image: logstash:9.0.4
    container_name: gigachill-logstash
    volumes:
      - ./backend/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./backend/logs:/logs
    depends_on:
      - elasticsearch
      - backend
    networks:
      - gigachill-network

  kibana:
    image: kibana:9.0.4
    container_name: gigachill-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - gigachill-network

  frontend:
    build:
      context: ./frontend
    env_file:
      - frontend/.env
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - NODE_ENV=production
      - PORT=${FRONTEND_PORT}
    depends_on:
      - backend

volumes:
  postgres-data:
  backend-build:
  certs:
  esdata01:
  kibanadata:
  metricbeatdata01:
  filebeatdata01:
  logstashdata01:

networks:
  default:
    name: gigachill-network
    external: false