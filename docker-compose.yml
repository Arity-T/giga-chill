services:
  postgres:
    image: postgres:17-alpine
    container_name: gigachill-db
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    ports:
      - "${DB_HOST_PORT}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5

  builder:
    build:
      context: .
      dockerfile: backend/Dockerfile.builder
    image: gigachill-builder
    depends_on:
      postgres:
        condition: service_healthy
    env_file:
      - .env
    command: ["./build.sh"]
    volumes:
      - backend-build:/app/build

  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile.backend
    depends_on:
      builder:
        condition: service_completed_successfully
    env_file:
      - .env
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - backend-build:/app/build
      - ./backend/logs:/app/logs

  elasticsearch:
    image: elasticsearch:9.0.4
    container_name: gigachill-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    networks:
      - gigachill-network
  logstash:
    image: logstash:9.0.4
    container_name: gigachill-logstash
    volumes:
      - ./backend/logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./backend/logs:/logs
    depends_on:
      - elasticsearch
      - backend
    networks:
      - gigachill-network

  kibana:
    image: kibana:9.0.4
    container_name: gigachill-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - gigachill-network

  frontend:
    build:
      context: ./frontend
    env_file:
      - frontend/.env
    ports:
      - "${FRONTEND_PORT}:${FRONTEND_PORT}"
    environment:
      - NODE_ENV=production
      - PORT=${FRONTEND_PORT}
    depends_on:
      - backend

volumes:
  postgres-data:
  backend-build:
  certs:
  esdata01:
  kibanadata:
  metricbeatdata01:
  filebeatdata01:
  logstashdata01:

networks:
  default:
    name: gigachill-network
    external: false