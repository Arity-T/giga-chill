volumes:
  shared-app-logs:
      external: true
  certs:
  esdata01:
  kibanadata:
  metricbeatdata01:
  filebeatdata01:
  logstashdata01:

networks:
  default:
    name: gigachill-elastic
    external: false

services:
  elk-setup:
   image: elastic/elasticsearch:${STACK_VERSION}
   volumes:
     - certs:/usr/share/elasticsearch/config/certs
   user: "0"
   command: >
     bash -c '
       if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
       elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";  
          exit 1;
       fi;
       if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
       fi;
       if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: kibana\n"\
          "    dns:\n"\
          "      - kibana\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find config/certs -type d -exec chmod 755 \{\} \;
        find config/certs -type f -exec chmod 644 \{\} \;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "Copying all certs to shared volume...";
        [ -d config/certs ] && cp -r config/certs/* /usr/share/elasticsearch/config/certs/;
        echo "Setting final permissions...";
        chmod -R 755 /usr/share/elasticsearch/config/certs;
        chmod 644 /usr/share/elasticsearch/config/certs/*/*;
        echo "All certificates ready in shared volume";
        echo "All done!";
     '
   healthcheck:
     test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
     interval: 1s
     timeout: 5s
     retries: 120

  es01:
    depends_on:
     elk-setup:
       condition: service_healthy
    image: elastic/elasticsearch:${STACK_VERSION}
    labels:
     co.elastic.logs/module: elasticsearch
    ports:
      - "${ES_PORT}:9200"
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
     memlock:
       soft: -1
       hard: -1
    healthcheck:
     test:
       [
         "CMD-SHELL",
         "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
       ]
     interval: 10s
     timeout: 10s
     retries: 120

  kibana:
    depends_on:
      es01:
          condition: service_healthy
    image: elastic/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
     - certs:/usr/share/kibana/config/certs
     - kibanadata:/usr/share/kibana/data
    ports:
      - "${KIBANA_PORT}:5601"
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - ELASTICSEARCH_SERVICE_TOKEN_FILE=/tokens/kibana.token
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  metricbeat01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: elastic/metricbeat:${STACK_VERSION}
    user: "1000:0"
    entrypoint: /bin/sh -c
    command: >
      "
        # сперва загружаем дашборды (отключаем проверку прав)
        metricbeat --strict.perms=false setup --dashboards &&
        # потом запускаем сам Beat
        exec metricbeat --strict.perms=false
      "
    volumes:
     - certs:/usr/share/metricbeat/certs
     - metricbeatdata01:/usr/share/metricbeat/data
     - ./metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
     - /var/run/docker.sock:/var/run/docker.sock:ro
     - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
     - /proc:/hostfs/proc:ro
     - /:/hostfs:ro
    environment:
     - ELASTIC_USER=elastic
     - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
     - ELASTIC_HOSTS=https://es01:9200
     - KIBANA_HOSTS=http://kibana:5601
     - LOGSTASH_HOSTS=${METRICBEAT_LOGSTASH_HOSTS}

  filebeat01:
    depends_on:
      es01:
        condition: service_healthy
    image: elastic/filebeat:${STACK_VERSION}
    user: "1000:0"
    command: ["--strict.perms=false"]
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata01:/usr/share/filebeat/data
      - shared-app-logs:/usr/share/filebeat/logs
      - ./filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=${FILEBEAT_LOGSTASH_HOSTS}

  logstash01:
    depends_on:
      es01:
        condition: service_healthy
    image: elastic/logstash:${STACK_VERSION}
    labels:
     co.elastic.logs/module: logstash
    user: "1000:1000"
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - ./logstash/pipeline/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
    ports:
      - "${LOGSTASH_PORT}:5044" # для Filebeat
      - "9600:9600" # для Metricbeat
    environment:
      - STACK_VERSION=${STACK_VERSION}
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - ELASTICSEARCH_SSL_CERTIFICATE_AUTHORITIES=/usr/share/logstash/certs/ca/ca.crt